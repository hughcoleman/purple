#!/usr/bin/env python
# -*- coding: utf-8 -*-

# system97
# Copyright (c) 2014 Brian Neal
# Copyright (c) 2020 Hugh Coleman
#
# This file is part of hughcoleman/system97, a historically accurate simulator
# of the "System 97" or Type-B Cipher Machine. It is released under the MIT
# License (see LICENSE.)

import system97.machine

import argparse
import re


def parse_shorthand(settings):
    """ Parse the shorthand notation used by American codebreakers. """

    shorthand = re.compile(
        r"\b(0?[1-9]|1[0-9]|2[0-5])\-(0?[1-9]|1[0-9]|2[0-5])\,(0?[1-9]|1[0-9]|2[0-5])\,(0?[1-9]|1[0-9]|2[0-5])\-([1-3])([1-3])\b"
    )

    if not (groups := re.search(shorthand, settings)):
        raise ValueError("Unrecognized shorthand format.")

    # Extract the inital stepper position information from the shorthand
    # notation.
    positions = {
        6: int(groups.group(1)) - 1,
        20: [int(groups.group(n)) - 1 for n in [2, 3, 4]],
    }

    # Extract the stepper speed information from the shorthand notation. Then,
    # use some hacky list comprehension to determine the slow rotor.
    fast, medium = int(groups.group(5)), int(groups.group(6))
    slow = [v for v in [1, 2, 3] if v not in [fast, medium]][0]

    return {"positions": positions, "speeds": (fast, medium, slow)}


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    # configure: machine operating mode
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-e", "--encrypt", action="store_true", help="perform an encryption"
    )
    group.add_argument(
        "-d", "--decrypt", action="store_true", help="perform a decryption"
    )

    # configure: maching cipher settings
    parser.add_argument(
        "-s",
        "--switches",
        help="switch settings in shorthand notation; e.g. 9-1,24,6-23",
    )
    parser.add_argument(
        "-p",
        "--plugboard",
        help="plugboard wiring; e.g. NOKTYUXEQLHBRMPDICJASVWGZF",
    )

    # configure: input stream
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        help="input text to encrypt/decrypt",
    )

    args = parser.parse_args()

    # Create an instance of System97 with the supplied parameters.
    # `parse_shorthand` will return a dictionary with keys that can be expanded
    # to **kwargs.
    machine = system97.machine.System97(
        **parse_shorthand(args.switches), plugboard=args.plugboard
    )

    if args.encrypt:
        output = machine.encrypt(args.input.read())
    elif args.decrypt:
        output = machine.decrypt(args.input.read())

    print(output)
